apiVersion: v1
kind: Template
labels:
  template: sprint-host-status-template
metadata:
  annotations:
    description: |- 
        This template deploys a simple web app, based on Java Spring library.
    # Could be any icon, I just chose something at random
    iconClass: icon-python 
    openshift.io/display-name: Spring Web Host Status
    tags: spring,web,host,status
    name: spring-host-status

parameters:
- name: SERVICE_NAME
  displayName: Service Name
  description: Service name for your application
  required: false
  value: spring-host-status
- name: IMAGE_TAG
  displayName: Image Tag
  description: Docker image tag to use on the pod, default=latest.
  required: false
  value: latest
- name: PORT_NUMBER
  displayName: port
  description: Port number, default=8085.
  required: false
  value: "8085"

objects:
# You'll need this kind of secret if your docker registry needs some login
# Otherwise (if docker registry is public), skip it
- apiVersion: v1
  kind: Secret
  metadata:
    name: my-secret-name
    annotations:
    # This will allow you to revile the password on GUI
    # If you wish not to allow password reviling, don't use this annotation!
    tamplate.openshift.io/base64-expose-password: "{.data['password']}"
  type: kubernetes.io/dockercfg
  data:
    .dockercfg: SomeRegistryHost,User,Password,AndEmail,All_In_Json,AllOfThat-encodeWithBase64

- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${SERVICE_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
      - from:
          kind: DockerImage
          name: registry.gitlab.com/mr-anderson86/spring-host-status/spring-host-status
        importPolicy:
          # if youre registry is using secure but you don't can allow yourself to skip it...
          insecure: true
        referencePolicy:
          type: Local
        name: ${IMAGE_TAG}

# That's where all the magic happens :-)
# this will allow you to roll back and forward with you deployments if you recognize that some deployment is bad or bugged.
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${SERVICE_NAME}
  spec:
    # Better to have more than 1 replica, just in case 1 fails, 
    # then the other will continue working until OpenShift creates the new pod.
    replicas: 2
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 120
  template:
    metadata:
      annotations:
        # The line below will allow your pod to use the image from the current namespace,
        # This way, you could use the template in any namespace you wish.
        alpha.image.policy.openshift.io/resolve-names: '*'
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
      - name: ${SERVICE_NAME}
        # If you gave a different name to your ImageStream rather than "${SERVICE_NAME}", then put the different name below.
        image: ${SERVICE_NAME}:${IMAGE_TAG}
        ports:
        -  containerPort: ${{PORT_NUMBER}}
        # Checking if pod is ready (or if failed to create)
        readinessProbe:
          httpGet:
            path: / # or any other endpoint for that matter.
            port: ${{PORT_NUMBER}}
            scheme: HTTP
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 10
        # Making sure pod is alive and well.
        livenessProbe:
          httpGet:
            path: / # or any other endpoint for that matter.
            port: ${{PORT_NUMBER}}
            scheme: HTTP
          periodSeconds: 60
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3

- apiVersion: v1
  kind: Service
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    ports:
    - name: ${PORT_NUMBER}-tcp
      port: ${{PORT_NUMBER}}
      protocol: tcp
      targetPort: ${{PORT_NUMBER}}
    selector:
      app: ${SERVICE_NAME}

- apiVersion: v1
  kind: Route
  metadata:
    name: ${SERVICE_NAME}
    labels:
      app: ${SERVICE_NAME}
  spec:
    port:
      targetPort: ${{PORT_NUMBER}}-tcp
    to:
      kind: Service
      name: ${SERVICE_NAME}
